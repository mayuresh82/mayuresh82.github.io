<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on NRE-Bytes</title>
    <link>https://mayuresh82.github.io/post/</link>
    <description>Recent content in Posts on NRE-Bytes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Dec 2020 15:05:46 -0800</lastBuildDate>
    
	<atom:link href="https://mayuresh82.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building Dynamic Inventories in Nornir</title>
      <link>https://mayuresh82.github.io/2020/12/25/nornir_inventories/</link>
      <pubDate>Mon, 21 Dec 2020 15:05:46 -0800</pubDate>
      
      <guid>https://mayuresh82.github.io/2020/12/25/nornir_inventories/</guid>
      <description>Building Dynamic Inventories in Nornir Organizing your Nornir inventory into multiple groups based on device attributes is a useful feature that allows running tasks against specific groups of hosts. Other frameworks like Ansible ship with a powerful dynamic inventory management system that allows grouping and filtering. While Nornir 3.0 has a community driven Netbox Plugin, it is pretty basic and includes a simple way to pull in hosts from Netbox. In this blog post, we will see how we can extend this Netbox plugin to build a dynamic inventory with powerful grouping and run-time filtering capabilities.</description>
    </item>
    
    <item>
      <title>BGP based Anycast as a Service</title>
      <link>https://mayuresh82.github.io/2020/11/28/automatic_service_discovery_anycast/</link>
      <pubDate>Sat, 28 Nov 2020 15:05:46 -0800</pubDate>
      
      <guid>https://mayuresh82.github.io/2020/11/28/automatic_service_discovery_anycast/</guid>
      <description>Orchestration and Service Discovery The term orchestration, in part, refers to the automated deployment of services or applications inside of your infrastructure. The orchestration solution takes care of things like resource allocation, entitlements and the placement of an application or a service on a machine or a group of machines. If the machine your service is deployed on fails for some reason, the orchestration system automatically detects the failure and re-deploys the service according to the service policy.</description>
    </item>
    
    <item>
      <title>Getting started with Network Automation</title>
      <link>https://mayuresh82.github.io/2019/05/06/getting_started/</link>
      <pubDate>Mon, 06 May 2019 15:05:46 -0800</pubDate>
      
      <guid>https://mayuresh82.github.io/2019/05/06/getting_started/</guid>
      <description>Getting Started with Network Automation Network Automation is the “art” of automating repetitive tasks related to network provisioning, deployment, monitoring and alerting. The reason its an art is because you can conceptualize and develop very creative methods to achieve your network automation goals. To get started, it is important to first identify a problem that needs to be solved, ideally a simple one. This helps establish clear goals and helps navigate the myriad web of libraries and open source tools available at your disposal.</description>
    </item>
    
  </channel>
</rss>