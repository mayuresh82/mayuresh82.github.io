<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>General on NRE-Bytes</title>
    <link>https://mayuresh82.github.io/categories/general/</link>
    <description>Recent content in General on NRE-Bytes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Apr 2022 09:00:00 -0800</lastBuildDate><atom:link href="https://mayuresh82.github.io/categories/general/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building User Interfaces for Network Automation</title>
      <link>https://mayuresh82.github.io/2022/04/15/building-uis-network-automation/</link>
      <pubDate>Fri, 15 Apr 2022 09:00:00 -0800</pubDate>
      
      <guid>https://mayuresh82.github.io/2022/04/15/building-uis-network-automation/</guid>
      <description>The importance of User Interfaces for Network Automation One of the least talked about aspects of network automation workflows is the ability to interface with the different tools and frameworks that enable these workflows. Consider a scenario where you are part of a small team of Network Engineers in a small company that has a small but growing customer base. You realize the need to automate your device and link provisioning workflows and hack up a few Python scripts (or Ansible playbooks if you prefer) that get the job done in the beginning.</description>
    </item>
    
    <item>
      <title>Building an Edge Traffic Controller - Part 2</title>
      <link>https://mayuresh82.github.io/2021/03/22/edge-controller-part2/</link>
      <pubDate>Mon, 22 Mar 2021 09:00:00 -0800</pubDate>
      
      <guid>https://mayuresh82.github.io/2021/03/22/edge-controller-part2/</guid>
      <description>In Part 1 of this series, we ran through the technical details of what it would take to build an edge traffic controller to steer traffic away from overloaded edge links. In this blog, I will try to demonstrate the controller in action by simulating traffic flows using our virtualized topology. We will also look into other real world considerations such as operational monitoring and metrics.
Initial Setup To recap, this is what our topology looks like:</description>
    </item>
    
    <item>
      <title>Building an Edge Traffic Controller - Part 1</title>
      <link>https://mayuresh82.github.io/2021/02/23/edge-controller-part1/</link>
      <pubDate>Tue, 23 Feb 2021 09:00:00 -0800</pubDate>
      
      <guid>https://mayuresh82.github.io/2021/02/23/edge-controller-part1/</guid>
      <description>2017 was the year of the Software Defined Network (SDN). Apart from other things like new players jumping onto the SDN space and a bunch of new SD-WAN offerings, two prominent innovation leaders - Google and Facebook - both released blogs and papers on their software defined edge network. Google&amp;rsquo;s solution; named Espresso, is likely a more battle tested and production-hardened solution owning to years of R&amp;amp;D and testing. It is, however (or at least in my opinion) a lot more complex than Facebook&amp;rsquo;s Edge Fabric that uses a much simpler approach to solving the same problem - which is to overcome BGP&amp;rsquo;s inability to take link performance ( which translates to application performance) into account for its routing decisions.</description>
    </item>
    
  </channel>
</rss>
